metadata:
  version: "1"
  dependencies:
    apps:
      - id: dynatrace.automations
        version: ^1.1987.0
  inputs: []
workflow:
  title: Record & Submit Entity Type Counts
  tasks:
    post_metric_data:
      name: post_metric_data
      description: Run custom JavaScript code.
      action: dynatrace.automations:run-javascript
      input:
        script: >-
          import { result } from '@dynatrace-sdk/automation-utils';

          import { credentialVaultClient, CredentialsDetailsTokenResponseElement
          } from '@dynatrace-sdk/client-classic-environment-v2';


          export default async function () {
            const entityCounts = await result('count_entity_types');
            
            const envUrl = globalThis.environmentUrl;
            const environment = envUrl.replace(/\.apps\.|\.live\./, '.').replace(/\/$/, '');
            const ingestUrl = environment + "/api/v2/metrics/ingest";
            
            var token = "";
            const tokenCred: CredentialsDetailsTokenResponseElement = 
            await credentialVaultClient.getCredentialsDetails({
              id: 'CREDENTIALS_VAULT-XXXX'
            });
            token = tokenCred.token;
            
            const metricLines = entityCounts.map(row => {
              const entityType = row["Entity Type"].replace(/[^a-zA-Z0-9_:.-]/g, "_");
              const count = row["Count"];
              return `entity.types.count,entity_type=${entityType} ${count}`;
            });
            
            const payload = metricLines.join("\n");
            
            const response = await fetch(ingestUrl, {
              method: "POST",
              headers: {
                "Content-Type": "text/plain; charset=utf-8",
                "Authorization": `Api-Token ${token}`
              },
              body: payload
            });
            
            if (!response.ok) {
              const errorText = await response.text();
              throw new Error(`Metric ingest failed: ${response.status} - ${errorText}`);
            }
            console.log(`Successfully submitted ${metricLines.length} metrics.`)
            return {
              message: `Successfully submitted ${metricLines.length} metrics.`,
              submittedMetrics: metricLines
            };
          }
      position:
        x: 0
        y: 2
      predecessors:
        - count_entity_types
      conditions:
        states:
          count_entity_types: OK
    count_entity_types:
      name: count_entity_types
      description: Run custom JavaScript code.
      action: dynatrace.automations:run-javascript
      input:
        script: >-
          import { credentialVaultClient, CredentialsDetailsTokenResponseElement
          } from '@dynatrace-sdk/client-classic-environment-v2';


          const envUrl = globalThis.environmentUrl;

          const environment = envUrl.replace(/\.apps\.|\.live\./,
          '.').replace(/\/$/, '');

          const typeEndpoint = "/api/v2/entityTypes";

          const entityEndpoint = "/api/v2/entities";

          var token = "";


          const fetchAllEntityTypes = async () => {
            let types = [];
            let nextPageKey = null;

            do {
              const url = new URL(environment + typeEndpoint);
              if (nextPageKey) {
                url.searchParams.append("nextPageKey", nextPageKey);
              }

              const response = await fetch(url, {
                method: "GET",
                headers: {
                  Accept: "application/json",
                  Authorization: "Api-Token " + token,
                },
              });

              const data = await response.json();
              types = types.concat(data.types);
              nextPageKey = data.nextPageKey;
            } while (nextPageKey);

            return types;
          };


          const fetchEntityCountByType = async (type) => {
            const url = new URL(environment + entityEndpoint);
            url.searchParams.append("entitySelector", `type("${type}")`);

            const response = await fetch(url, {
              method: "GET",
              headers: {
                Accept: "application/json",
                Authorization: "Api-Token " + token,
              },
            });

            const data = await response.json();
            return data.totalCount || 0;
          };


          export default async function () {

            const tokenCred: CredentialsDetailsTokenResponseElement = 
            await credentialVaultClient.getCredentialsDetails({
              id: 'CREDENTIALS_VAULT-XXXX'
            });
            token = tokenCred.token;
            
            const types = await fetchAllEntityTypes();
            const tableData = [];

            for (const typeObj of types) {
              const type = typeObj.type;
              try {
                const count = await fetchEntityCountByType(type);
                if (count > 0) {
                  tableData.push({
                  "Entity Type": type,
                  "Count": count
                });
                }
              } catch (error) {
                console.error(`Error fetching count for type ${type}:`, error);
              }
            }
            console.log(`Gathered Entity Counts for ${tableData.length} entity types`)
            return tableData
          }
      position:
        x: 0
        y: 1
      predecessors: []
  description: >-
    Records & Submits as a metric all Entity Types + the Count of the entities
    per type. Entity types that have a count of 0 are omitted.

    Metric Key: entity.types.count.gauge

    Access Token Scopes Required: read.entities, write.metrics, ingest.metrics
  trigger: {}
  schemaVersion: 3
  result: null
  input: {}
  hourlyExecutionLimit: 1000
  type: STANDARD
